import * as crypto from 'crypto';
import consola from 'consola';

const AUTO_GENERATED_INTRO: string = 'This file is being modified by glue-ops. Do not edit manually.';
const SYNCHRONIZATION_HASH_BASE: string = 'Synchronization-Hash:';

const cleanContent = (fileContents: string): string => fileContents.split('\n').slice(3).join('\n');

const sha256 = (content: string): string => crypto.createHash('sha256').update(content).digest('hex');

const syncHashExists = (contents: string): boolean => new RegExp(AUTO_GENERATED_INTRO).test(contents);

const validateTargetFileHash = (contents: string) => {
  if (!syncHashExists(contents)) {
    return;
  }

  const hashCommentRegex = new RegExp(`${SYNCHRONIZATION_HASH_BASE} ([a-z0-9]+)`);
  const targetHash = contents.match(hashCommentRegex)[1];

  const valid = sha256(cleanContent(contents)) === targetHash;

  if (!valid) {
    consola.error('The target file has been modified and does not match it\'s Synchronization-Hash.');
    process.exit(1);
  }
};

const addComments = (contents: string, commentSyntax: string): string => {
  const autogeneratedHash = `${commentSyntax} ${SYNCHRONIZATION_HASH_BASE} ${sha256(contents)}`;
  const intro = `${commentSyntax} ${AUTO_GENERATED_INTRO}`;
  return `${intro}\n${autogeneratedHash}\n\n${contents}`;
};

const addAutogeneratedComments = (contents: string, commentSyntax: string): string => {
  if (syncHashExists(contents)) {
    return cleanContent(contents);
  }
  return addComments(contents, commentSyntax);
};

export {
  addAutogeneratedComments,
  validateTargetFileHash,
};
